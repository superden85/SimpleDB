package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    
    private JoinPredicate p;
    private OpIterator child1;
    private OpIterator child2;
    
    private Tuple currentLeftTuple = null;
    
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
    	this.p = p;
    	this.child1 = child1;
    	this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        int i = p.getField1();
        return child1.getTupleDesc().getFieldName(i);
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        int i = p.getField2();
        return child1.getTupleDesc().getFieldName(i);
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        TupleDesc td1 = child1.getTupleDesc();
        TupleDesc td2 = child2.getTupleDesc();
        return TupleDesc.merge(td1, td2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	super.open();
    	child1.open();
    	child2.open();
    }

    public void close() {
        // some code goes here
    	super.close();
    	child1.close();
    	child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	super.close();
    	super.open();
    	child1.rewind();
    	child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	if (currentLeftTuple == null && !(child1.hasNext())) {
    		return null;
    	}
    	if (currentLeftTuple == null) {
    		currentLeftTuple = child1.next();
    	}
    	if (child2.hasNext()) {
    		Tuple t1 = currentLeftTuple;
    		Tuple t2 = child2.next();
    		if (p.filter(t1, t2)) {
    			return Tuple.mergeTuples(t1, t2);
    		}
    		else {
    			return fetchNext();
    		}
    	}
    	else {
    		child2.rewind();
    		currentLeftTuple = null;
    		return fetchNext();
    	}
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
    	OpIterator childIt1 = ((Operator) child1).getChildren()[0];
    	OpIterator childIt2 = ((Operator) child2).getChildren()[0];
    	OpIterator[] res = new OpIterator[]{childIt1, childIt2};
    	return res;
    }
    
    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
    	OpIterator[] ch1 = new OpIterator[] {children[0]};
    	OpIterator[] ch2 = new OpIterator[] {children[1]};
    	
    	((Operator) child1).setChildren(ch1);
    	((Operator) child2).setChildren(ch2);


    }

}
